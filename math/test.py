import heapq
from collections import defaultdict, Counter

# Créer un noeud d'arbre
class Noeud:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.gauche = None
        self.droite = None

    # Comparer les noeuds basés sur la fréquence (pour le tri)
    def __lt__(self, autre):
        return self.freq < autre.freq

# Construire l'arbre de Huffman
def construire_arbre(freq_dict):
    heap = [Noeud(char, freq) for char, freq in freq_dict.items()]
    heapq.heapify(heap)
    
    while len(heap) > 1:
        noeud1 = heapq.heappop(heap)  # Extraire le noeud avec la plus petite fréquence
        noeud2 = heapq.heappop(heap)  # Extraire le second noeud avec la plus petite fréquence

        # Créer un nouveau noeud combinant ces deux noeuds
        nouveau_noeud = Noeud(None, noeud1.freq + noeud2.freq)
        nouveau_noeud.gauche = noeud1
        nouveau_noeud.droite = noeud2

        # Ajouter le nouveau noeud à l'arbre
        heapq.heappush(heap, nouveau_noeud)

    return heap[0]  # L'arbre final

# Générer les codes à partir de l'arbre
def generer_codes(noeud, prefixe="", code_huffman={}):
    if noeud is None:
        return

    # Si c'est une feuille, on a trouvé un caractère
    if noeud.char is not None:
        code_huffman[noeud.char] = prefixe

    # Traverser l'arbre récursivement pour obtenir les codes
    generer_codes(noeud.gauche, prefixe + "0", code_huffman)
    generer_codes(noeud.droite, prefixe + "1", code_huffman)

    return code_huffman

# Encoder un texte en utilisant les codes de Huffman
def encoder_texte(texte, code_huffman):
    return ''.join([code_huffman[char] for char in texte])

# Décoder un texte encodé
def decoder_texte(texte_encode, arbre_huffman):
    noeud = arbre_huffman
    texte_decode = ""
    
    for bit in texte_encode:
        if bit == '0':
            noeud = noeud.gauche
        else:
            noeud = noeud.droite

        if noeud.char is not None:
            texte_decode += noeud.char
            noeud = arbre_huffman

    return texte_decode

# Exemple d'utilisation
texte = "Vous savez, moi je ne crois pas qu’il y ait de bonne ou de mauvaise situation. Moi, si je devais résumer ma vie aujourd’hui avec vous, je dirais que c’est d’abord des rencontres. Des gens qui m’ont tendu la main, peut-être à un moment où je ne pouvais pas, où j’étais seul chez moi. Et c’est assez curieux de se dire que les hasards, les rencontres forgent une destinée... Parce que quand on a le goût de la chose, quand on a le goût de la chose bien faite, le beau geste, parfois on ne trouve pas l’interlocuteur en face je dirais, le miroir qui vous aide à avancer. Alors ça n’est pas mon cas, comme je disais là, puisque moi au contraire, j’ai pu ; et je dis merci à la vie, je lui dis merci, je chante la vie, je danse la vie... je ne suis qu’amour ! Et finalement, quand des gens me disent « Mais comment fais-tu pour avoir cette humanité ? », je leur réponds très simplement que c’est ce goût de l’amour, ce goût donc qui m’a poussé aujourd’hui à entreprendre une construction mécanique... mais demain qui sait ? Peut-être simplement à me mettre au service de la communauté, à faire le don, le don de soi."

# Étape 1 : Calculer la fréquence de chaque caractère dans le texte
frequence = Counter(texte)

# Étape 2 : Construire l'arbre de Huffman
arbre_huffman = construire_arbre(frequence)

# Étape 3 : Générer les codes Huffman pour chaque caractère
codes_huffman = generer_codes(arbre_huffman)
print(arbre_huffman)

# Étape 4 : Encoder le texte
texte_encode = encoder_texte(texte, codes_huffman)
print("Texte encodé :", texte_encode)

texte_encode
# Étape 5 : Décoder le texte encodé
texte_decode = decoder_texte(texte_encode, arbre_huffman)
print("Texte décodé :", texte_decode)
